{"version":3,"sources":["styles/app.module.scss","i18n.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","language","localStorage","getItem","i18n","use","initReactI18next","init","resources","en","common","ru","ua","lng","ns","defaultNS","keySeparator","withTranslation","t","lsLanguage","useState","setLanguage","menu","toggleMenu","node","useRef","useEffect","document","addEventListener","handleClickOutside","removeEventListener","e","current","contains","target","languageChange","lang","changeLanguage","setItem","className","s","app","title","wrap","ref","close","menuItem","onClick","currentLanguage","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,MAAQ,mBAAmB,KAAO,kBAAkB,SAAW,sBAAsB,gBAAkB,6BAA6B,MAAQ,qB,20HCKxMC,EAAWC,aAAaC,QAAQ,YAEtCC,IACGC,IAAIC,KACJC,KAAK,CACJC,UAAW,CACPC,GAAI,CACFC,OAAQD,GAEVE,GAAI,CACFD,OAAQC,GAEVC,GAAI,CACAF,OAAQE,IAGhBC,IAAKZ,GAAsB,KAC3Ba,GAAI,CAAC,UACLC,UAAW,SACXC,cAAc,IAGDZ,EAAf,EAAeA,I,uBCyCFa,iBA/DI,SAAC,GAAiB,IAAfb,EAAc,EAAdA,KAAMc,EAAQ,EAARA,EACpBC,EAAajB,aAAaC,QAAQ,YADN,EAEFiB,mBAASD,GAA0B,MAFjC,mBAE3BlB,EAF2B,KAEjBoB,EAFiB,OAGPD,oBAAS,GAHF,mBAG3BE,EAH2B,KAGrBC,EAHqB,KAI5BC,EAAOC,mBACbC,qBAAU,WAER,OADAC,SAASC,iBAAiB,YAAaC,GAChC,WACLF,SAASG,oBAAoB,YAAaD,MAE3C,IACH,IAAMA,EAAqB,SAAAE,GACrBP,EAAKQ,QAAQC,SAASF,EAAEG,SAG5BX,GAAW,IAEPY,EAAiB,SAAAC,GACrB,OACEhC,EAAKiC,eAAeD,GACpBlC,aAAaoC,QAAQ,WAAYF,GACjCf,EAAYe,GACZb,GAAW,IAIf,OACE,yBAAKgB,UAAWC,IAAEC,KAChB,wBAAIF,UAAWC,IAAEE,OAAQxB,EAAE,UAC3B,6BAAMA,EAAE,gBACR,yBAAKqB,UAAWC,IAAEG,KAAMC,IAAKpB,GAC3B,yBAAKe,UAAWjB,EAAOkB,IAAElB,KAAL,UAAekB,IAAElB,KAAjB,YAAyBkB,IAAEK,QAC7C,4BACEN,UAAWC,IAAEM,SACbC,QAAS,kBAAMZ,EAAe,QAFhC,MAMA,4BACEI,UAAWC,IAAEM,SACbC,QAAS,kBAAMZ,EAAe,QAFhC,MAMA,4BACEI,UAAWC,IAAEM,SACbC,QAAS,kBAAMZ,EAAe,QAFhC,OAOF,yBACEI,UAAWC,IAAEQ,gBACbD,QAAS,kBAAcxB,GAAPD,IAChBoB,MAAM,4BAELzC,EALH,gBC7CYgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAAS6B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f10ab682.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__nxlwr\",\"wrap\":\"app_wrap__2Ev59\",\"title\":\"app_title__3wS5s\",\"menu\":\"app_menu__2B6pv\",\"menuItem\":\"app_menuItem__3e5Cv\",\"currentLanguage\":\"app_currentLanguage__3-KaQ\",\"close\":\"app_close__2dm9Y\"};","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport en from \"./locales/en/common.json\";\nimport ru from \"./locales/ru/common.json\";\nimport ua from \"./locales/ua/common.json\";\n\nconst language = localStorage.getItem(\"language\");\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources: {\n        en: {\n          common: en,\n        },\n        ru: {\n          common: ru,\n        },\n        ua: {\n            common: ua,\n          },\n      },\n    lng: language ? language : \"en\",\n    ns: ['common'],\n    defaultNS: 'common',\n    keySeparator: true,\n  });\n\n  export default i18n;","import React, { useState, useRef, useEffect } from \"react\";\nimport { withTranslation } from \"react-i18next\";\n\n//styles\nimport s from \"./styles/app.module.scss\";\n\nexport const App = ({ i18n, t }) => {\n  const lsLanguage = localStorage.getItem(\"language\");\n  const [language, setLanguage] = useState(lsLanguage ? lsLanguage : \"ua\");\n  const [menu, toggleMenu] = useState(false);\n  const node = useRef();\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n  const handleClickOutside = e => {\n    if (node.current.contains(e.target)) {\n      return;\n    }\n    toggleMenu(false);\n  };\n  const languageChange = lang => {\n    return (\n      i18n.changeLanguage(lang),\n      localStorage.setItem(\"language\", lang),\n      setLanguage(lang),\n      toggleMenu(false)\n    )\n  };\n\n  return (\n    <div className={s.app}>\n      <h1 className={s.title}>{t(\"title\")}</h1>\n      <div>{t(\"description\")}</div>\n      <div className={s.wrap} ref={node}>\n        <nav className={menu ? s.menu : `${s.menu} ${s.close}`}>\n          <button\n            className={s.menuItem}\n            onClick={() => languageChange(\"ua\")}\n          >\n            ua\n          </button>\n          <button\n            className={s.menuItem}\n            onClick={() => languageChange(\"ru\")}\n          >\n            ru\n          </button>\n          <button\n            className={s.menuItem}\n            onClick={() => languageChange(\"en\")}\n          >\n            en\n          </button>\n        </nav>\n        <div\n          className={s.currentLanguage}\n          onClick={() => (menu ? toggleMenu(false) : toggleMenu(true))}\n          title=\"Click to change language\"\n        >\n          {language} &#x025BE;\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withTranslation()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18n';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}